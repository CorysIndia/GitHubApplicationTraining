<RSISynoptic
    x:Class="UGP_EDRF.BootStrap.Framework.Alarms.AlarmView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:alarms3="clr-namespace:RSI.Kernel.Model.Interfaces.Models.Parameters.Alarms;assembly=RSI.Kernel.Model.Interfaces"
    
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dgp="http://schemas.microsoft.com/wpf/2008/toolkit"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:solution="http://RSI/IndissPlus/Solution"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:wpfToolkit="clr-namespace:WPFToolKit;assembly=WPFToolkit"
    xmlns:wpfTools="http://schemas.rsi.com/WPFTools"
    xmlns:filtering="clr-namespace:WPFToolKit.Filtering;assembly=WPFToolkit"
    xmlns:collections="clr-namespace:System.Collections;assembly=mscorlib"
    xmlns:generic="clr-namespace:System.Collections.Generic;assembly=mscorlib"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:alarms="clr-namespace:UGP_EDRF.BootStrap.Framework.Alarms"
    xmlns:markupExtensions="clr-namespace:RSI.FoxboroEVO.Core.MarkupExtensions;assembly=RSI.FoxboroEVO.Core"
    xmlns:alarms1="clr-namespace:RSI.IndissPlus.Solution.Themes.Alarms;assembly=RSI.IndissPlus.Solution"
    xmlns:themes="clr-namespace:UGP_EDRF.Themes"
    xmlns:wpfTools1="clr-namespace:RSI.Common.WPFTools;assembly=RSI.Common.WPFTools"
    x:Name="alarmView"
    Background="#ECE9D8"
    mc:Ignorable="d"
    d:DesignHeight="500">

    <RSISynoptic.Resources>
        <Style x:Key="ColumnHeaderStyle" TargetType="{x:Type dgp:DataGridColumnHeader}">
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />

            <Setter Property="Template">

                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type dgp:DataGridColumnHeader}">

                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition />
                            </Grid.RowDefinitions>


                            <wpfToolkit:DataGridHeaderBorder
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                IsClickable="{TemplateBinding CanUserSort}"
                                IsHovered="{TemplateBinding IsMouseOver}"
                                IsPressed="{TemplateBinding IsPressed}"
                                SeparatorBrush="{TemplateBinding SeparatorBrush}"
                                SeparatorVisibility="{TemplateBinding SeparatorVisibility}"
                                SortDirection="{TemplateBinding SortDirection}">

                                <TextBlock
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    Text="{TemplateBinding Content}"
                                    TextWrapping="Wrap" />

                            </wpfToolkit:DataGridHeaderBorder>

                            <Thumb
                                Name="PART_LeftHeaderGripper"
                                Grid.Row="0"
                                HorizontalAlignment="Left">
                                <Thumb.Style>
                                    <Style TargetType="Thumb">
                                        <Setter Property="Width">
                                            <Setter.Value>
                                                <system:Double>8</system:Double>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Panel.Background">
                                            <Setter.Value>
                                                <SolidColorBrush>#00FFFFFF</SolidColorBrush>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Cursor">
                                            <Setter.Value>
                                                <Cursor>SizeWE</Cursor>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="Thumb">
                                                    <Border Padding="{TemplateBinding Control.Padding}" Background="{TemplateBinding Panel.Background}" />
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Thumb.Style>
                            </Thumb>

                            <Thumb
                                Name="PART_RightHeaderGripper"
                                Grid.Row="0"
                                HorizontalAlignment="Right">
                                <Thumb.Style>
                                    <Style TargetType="Thumb">
                                        <Setter Property="Width">
                                            <Setter.Value>
                                                <system:Double>8</system:Double>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Panel.Background">
                                            <Setter.Value>
                                                <SolidColorBrush>#00FFFFFF</SolidColorBrush>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Cursor">
                                            <Setter.Value>
                                                <Cursor>SizeWE</Cursor>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="Thumb">
                                                    <Border Padding="{TemplateBinding Control.Padding}" Background="{TemplateBinding Panel.Background}" />
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Thumb.Style>
                            </Thumb>
                        </Grid>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="SeparatorColor" 
                         Color="#b6bdc5"/>
           

</RSISynoptic.Resources>
    <Grid x:Name="Master" DataContext="{markupExtensions:AlarmServiceFoxboroBinding AlarmFilter}">
        <Grid.RowDefinitions>
            <RowDefinition Height="28" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        
        <!--  Toolbar  -->
        <ToolBarTray
            x:Name="MenuBar"
            Width="{Binding ActualWidth, ElementName=Master}"
            HorizontalAlignment="Left" Background="#FFECECEC">
            <ToolBar Background="#FFECECEC" Margin="0,0,0,0">

                <!--  Start / Stop Alarm list update  -->
                <Button Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/Open.png" />
                </Button>

                <!--  Down Arrow  -->
                <Button Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/DownArrow.png" />
                </Button>
                <Separator />

                <!--  Pause  -->
                <ToggleButton IsChecked="{markupExtensions:AlarmServiceFoxboroBinding IsSuspended}" Style="{StaticResource btt25}" IsHitTestVisible="{markupExtensions:AlarmServiceFoxboroBinding IsSuspended, Converter={Not}}">
                    <Image Source="../../../Resources/Pause.png"/>
                </ToggleButton>
                <!--<Button
                    Command="{Binding AcknowledgeSelectedAlarms}"
                    CommandParameter="{Binding SelectedItems, ElementName=AlarmGrid}"
                    Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/Pause.png" />
                </Button>-->

                <!--  Play  -->
                <ToggleButton IsChecked="{markupExtensions:AlarmServiceFoxboroBinding IsSuspended,Converter={Not}}" Style="{StaticResource btt25}" IsHitTestVisible="{markupExtensions:AlarmServiceFoxboroBinding IsSuspended}">
                    <Image Source="../../../Resources/Play.png"/>
                </ToggleButton>

                <!--<Button
                    Command="{Binding AcknowledgeSelectedAlarms}"
                    CommandParameter="{Binding Path=VisibleAlarms, ElementName=alarmView}"
                    Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/Play.png" />
                </Button>-->

                <Separator />
                <!--  Sort  -->
                <Button Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/Sort.png" />
                </Button>

                <!--  Filter  -->
                <Button Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/Filter.png" />
                </Button>

                <Separator />
                <!--  Bell Recycle -->
                <Button Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/BellRecycle.png" />
                </Button>

                <!--  Bell Page  -->
                <Button Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/BellPage.png" />
                </Button>

                <ComboBox Width="100" Height="20">
                </ComboBox>

                <TextBox Width="40" Height="20" Text="{Binding FilterPriorityFrom}" MaxLength="3">
                    <i:Interaction.Behaviors>
                        <wpfTools:NumericTextBoxBehavior AllowDecimal="False" />
                    </i:Interaction.Behaviors>
                </TextBox>
                <RSIText VerticalContentAlignment="Center" Text="&lt;-&gt;"></RSIText>
                <TextBox Width="40" Height="20" Text="{Binding FilterPriorityTo}" MaxLength="3">
                    <i:Interaction.Behaviors>
                        <wpfTools:NumericTextBoxBehavior AllowDecimal="False" DecimalLimit="1000"/>
                    </i:Interaction.Behaviors>
                </TextBox>

                <!--  Bell  -->
                <ToggleButton IsChecked="{Binding FilterUnack, Converter={Not}}" Style="{StaticResource btt25}">
                    <Image Source="../../../Resources/Bell.png" />
                </ToggleButton>

                <!--  Bell Tick -->
                <ToggleButton IsChecked="{Binding FilterAck, Converter={Not}}" Style="{StaticResource btt25}">
                    <Image Source="../../../Resources/BellTick.png" />
                </ToggleButton>

                <Separator />

                <!--  Bell Clock -->
                <Button Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/BellClock.png" />
                </Button>

                <Separator />
                <!--  Bell Window  -->
                <Button Style="{StaticResource bt25}" Command="{NavigateToAssociatedDisplayCommand}"
                                  CommandParameter="{Binding ElementName=AlarmGrid,
                                                                 Path=SelectedItem.ParentUnit}">
                    <Image Source="../../../Resources/BellWindow.png" />
                </Button>
                <Separator />
                <!--  Bell Check  -->
                <Button Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/BellCheck.png" />
                </Button>

                <!--  Bell Ring Right  -->
                <Button Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/BellRingRight.png" />
                </Button>

                <!--  Bell Ring Left  -->
                <Button Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/BellRingLeft.png" />
                </Button>
                
             
                <ToggleButton IsChecked="{AlarmSoundServiceBinding IsSoundEnabled}" Style="{StaticResource btt25}">

                    <Image Source="../../../Resources/Sound.png" />

                </ToggleButton>

                <!--  Silences the current Alarm  -->
                <!--<ToggleButtonContent IsChecked="{AlarmSoundServiceBinding IsSoundEnabled}" Style="{StaticResource btt25}">
                    <ToggleButtonContent.UncheckedContent>
                        <Image Source="../../../Resources/no_sound.png" />
                    </ToggleButtonContent.UncheckedContent>
                    <ToggleButtonContent.CheckedContent>
                        <Image Source="../../../Resources/sound.png" />
                    </ToggleButtonContent.CheckedContent>
                </ToggleButtonContent>-->
                <!--<ToggleButton IsChecked="{AlarmSoundServiceBinding IsSoundEnabled}" Style="{StaticResource btt25}">
                    
                        <Image Source="../../../Resources/no_sound.png" />
                    
                </ToggleButton>-->
                <!--<Button Style="{StaticResource bt25}">
                    <Image Source="../../../Resources/sound.png" />
                </Button>-->

                <!--<Separator />
                <Button Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/list.png" />
                </Button>
                <Button Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/refresh.png" />
                </Button>

                <Separator />
                <Button Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/zoom.png" />
                </Button>

                <Separator />
                <Button Style="{StaticResource bt25}" Command="dgp:WpfToolKitDataGrid.PageUpCommand" CommandTarget="{Binding ., ElementName=AlarmGrid}">
                    <Image Source="../../../Resources/pageup.png" />
                </Button>

                <Button Style="{StaticResource bt25}" Command="dgp:WpfToolKitDataGrid.PageDownCommand" CommandTarget="{Binding ., ElementName=AlarmGrid}">
                    <Image Source="../../../Resources/pagedown.png" />
                </Button>

                --><!--  System Status Viewer  --><!--
                <Button Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/alim.png" />
                </Button>

                <Button Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/idk.png" />
                </Button>

                <Button Style="{StaticResource bt25}" Command="{PrintServiceBinding PrintFrameworkElementCommand}" CommandParameter="{Binding ., ElementName=AlarmGrid}">
                    <Image Source="../../../Resources/printtoolbar.png" />
                </Button>
                <Button Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/view.png" />
                </Button>
                <Button Style="{StaticResource bt25Disabled}">
                    <Image Source="../../../Resources/help.png" />
                </Button>-->

            </ToolBar>
        </ToolBarTray>

        <!--  The Alarm List  -->
        <Grid Grid.Row="1">
            <Grid.Resources>
                <Style x:Key="RowStyle"  TargetType="{x:Type dgp:DataGridRow}">
                    <!--<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />-->
                    <Setter Property="Background" Value="Green" />
                    <Setter Property="SnapsToDevicePixels" Value="true" />
                    <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
                    <Setter Property="ValidationErrorTemplate">
                        <Setter.Value>
                            <ControlTemplate>
                                <TextBlock
                                    Margin="2,0,0,0"
                                    VerticalAlignment="Center"
                                    Foreground="Red"
                                    Text="!" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type dgp:DataGridRow}">
                                <BlinkControl DefaultValue="Red" Property="Border.Background">

                                    <!--  The blink conditions  -->
                                    <BlinkControl.Conditions>

                                        <!--  Critical, active = Blink Red to Back  -->
                                        <ConditionOfBlink From="Red" To="Black">
                                            <ConditionOfBlink.Binding>
                                                <MultiBinding Converter="{And}">
                                                    <Binding Path="Priority" Converter="{IsEqualTo 0}"/>
                                                    <Binding Path="IsStatusActive"/>
                                                </MultiBinding>
                                            </ConditionOfBlink.Binding>
                                        </ConditionOfBlink>

                                        <!--  Critical, acknowledged = Red  -->
                                        <ConditionOfBlink From="Red" To="Red">
                                            <ConditionOfBlink.Binding>
                                                <MultiBinding Converter="{And}">
                                                    <Binding Path="Priority" Converter="{IsEqualTo 0}"/>
                                                    <Binding Path="IsStatusAcknowledged"/>
                                                </MultiBinding>
                                            </ConditionOfBlink.Binding>
                                        </ConditionOfBlink>

                                        <!--  Critical, returned = Blink Red to White  -->
                                        <ConditionOfBlink From="Red" To="White">
                                            <ConditionOfBlink.Binding>
                                                <MultiBinding Converter="{And}">
                                                    <Binding Path="Priority" Converter="{IsEqualTo 0}"/>
                                                    <Binding Path="IsStatusReturned"/>
                                                </MultiBinding>
                                            </ConditionOfBlink.Binding>
                                        </ConditionOfBlink>

                                        <!--  Warning, active = Blink Orange to Back  -->
                                        <ConditionOfBlink From="Orange" To="Black">
                                            <ConditionOfBlink.Binding>
                                                <MultiBinding Converter="{And}">
                                                    <Binding Path="Priority" Converter="{IsEqualTo 1}"/>
                                                    <Binding Path="IsStatusActive"/>
                                                </MultiBinding>
                                            </ConditionOfBlink.Binding>
                                        </ConditionOfBlink>

                                        <!--  Warning, acknowledged = Orange  -->
                                        <ConditionOfBlink From="Orange" To="Orange">
                                            <ConditionOfBlink.Binding>
                                                <MultiBinding Converter="{And}">
                                                    <Binding Path="Priority" Converter="{IsEqualTo 1}"/>
                                                    <Binding Path="IsStatusAcknowledged"/>
                                                </MultiBinding>
                                            </ConditionOfBlink.Binding>
                                        </ConditionOfBlink>

                                        <!--  Warning, returned = Blink Orange to White  -->
                                        <ConditionOfBlink From="Orange" To="White">
                                            <ConditionOfBlink.Binding>
                                                <MultiBinding Converter="{And}">
                                                    <Binding Path="Priority" Converter="{IsEqualTo 1}"/>
                                                    <Binding Path="IsStatusReturned"/>
                                                </MultiBinding>
                                            </ConditionOfBlink.Binding>
                                        </ConditionOfBlink>

                                        <!--  Advisory, active = Blink Cyan to Back  -->
                                        <ConditionOfBlink From="Cyan" To="Black">
                                            <ConditionOfBlink.Binding>
                                                <MultiBinding Converter="{And}">
                                                    <Binding Path="Priority" Converter="{IsEqualTo 2}"/>
                                                    <Binding Path="IsStatusActive"/>
                                                </MultiBinding>
                                            </ConditionOfBlink.Binding>
                                        </ConditionOfBlink>

                                        <!--  Advisory, acknowledged = Cyan  -->
                                        <ConditionOfBlink From="Cyan" To="Cyan">
                                            <ConditionOfBlink.Binding>
                                                <MultiBinding Converter="{And}">
                                                    <Binding Path="Priority" Converter="{IsEqualTo 2}"/>
                                                    <Binding Path="IsStatusAcknowledged"/>
                                                </MultiBinding>
                                            </ConditionOfBlink.Binding>
                                        </ConditionOfBlink>

                                        <!--  Advisory, returned = Blink Cyan to White  -->
                                        <ConditionOfBlink From="Cyan" To="White">
                                            <ConditionOfBlink.Binding>
                                                <MultiBinding Converter="{And}">
                                                    <Binding Path="Priority" Converter="{IsEqualTo 2}"/>
                                                    <Binding Path="IsStatusReturned"/>
                                                </MultiBinding>
                                            </ConditionOfBlink.Binding>
                                        </ConditionOfBlink>
                                    </BlinkControl.Conditions>

                                    <Border
                                        x:Name="DGR_Border"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        SnapsToDevicePixels="True">
                                        <dgp:SelectiveScrollingGrid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>

                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*" />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>

                                            <dgp:DataGridCellsPresenter
                                                Grid.Column="1"
                                                ItemsPanel="{TemplateBinding ItemsPanel}"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                            <dgp:DataGridDetailsPresenter
                                                Grid.Row="1"
                                                Grid.Column="1"
                                                dgp:SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding RelativeSource={RelativeSource AncestorType={x:Type dgp:WpfToolKitDataGrid}}, Path=AreRowDetailsFrozen, Converter={x:Static dgp:WpfToolKitDataGrid.RowDetailsScrollingConverter}, ConverterParameter={x:Static dgp:SelectiveScrollingOrientation.Vertical}}"
                                                Visibility="{TemplateBinding DetailsVisibility}" />

                                            <dgp:DataGridRowHeader
                                                Grid.RowSpan="2"
                                                dgp:SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                                                Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type dgp:WpfToolKitDataGrid}}, Path=HeadersVisibility, Converter={x:Static dgp:WpfToolKitDataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static dgp:DataGridHeadersVisibility.Row}}" />
                                        </dgp:SelectiveScrollingGrid>
                                    </Border>
                                </BlinkControl>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>

                <Style x:Key="RowStyle2" TargetType="{x:Type wpfToolkit:DataGridRow}">
                   
                    <Style.Triggers>

                        <!--  Critical - Active  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="0" />
                                <Condition Binding="{Binding IsStatusActive}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="#FF138B9E" />
                        </MultiDataTrigger>

                        <!--  Critical - Acknowledged  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="0" />
                                <Condition Binding="{Binding IsStatusAcknowledged}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="Gray" />
                        </MultiDataTrigger>

                        <!--  Critical - Returned  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="0" />
                                <Condition Binding="{Binding IsStatusReturned}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="Gray" />
                        </MultiDataTrigger>

                        <!--  Warning - Active  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="1" />
                                <Condition Binding="{Binding IsStatusActive}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="Blue" />
                        </MultiDataTrigger>

                        <!--  Warning - Acknowledged  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="1" />
                                <Condition Binding="{Binding IsStatusAcknowledged}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="Gray" />
                        </MultiDataTrigger>

                        <!--  Warning - Returned  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="1" />
                                <Condition Binding="{Binding IsStatusReturned}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="Gray" />
                        </MultiDataTrigger>

                        <!--  Advisory - Active  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="2" />
                                <Condition Binding="{Binding IsStatusActive}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="Blue" />
                        </MultiDataTrigger>

                        <!--  Advisory - Acknowledged  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="2" />
                                <Condition Binding="{Binding IsStatusAcknowledged}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="Gray" />
                        </MultiDataTrigger>

                        <!--  Advisory - Returned  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="2" />
                                <Condition Binding="{Binding IsStatusReturned}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="Gray" />
                        </MultiDataTrigger>

                    </Style.Triggers>
                </Style>


                <Style x:Key="BlinkingBorderStyle" TargetType="{x:Type Border}">
                    <Setter Property="Background" Value="Red" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Style.Triggers>

                        <!--  Critical - Active  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="0" />
                                <Condition Binding="{Binding IsStatusActive}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard RepeatBehavior="Forever" Duration="0:0:1">
                                        <!--<ColorAnimation
                                            AutoReverse="False"
                                            RepeatBehavior="Forever"
                                            Storyboard.TargetProperty="(wpfToolkit:DataGridRow.Background).(SolidColorBrush.Color)"
                                            BeginTime="0"
                                            From="Red"
                                            To="Gray" 
                                            Duration="0:0:0.5" />
                                        <ColorAnimation
                                            AutoReverse="False"
                                            RepeatBehavior="Forever"
                                            Storyboard.TargetProperty="(wpfToolkit:DataGridRow.Background).(SolidColorBrush.Color)"
                                            BeginTime="100"
                                            From="Gray"
                                            To="Red" 
                                            Duration="0:0:0.5" />-->
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(wpfToolkit:DataGridRow.Background).(SolidColorBrush.Color)" >
                                            <DiscreteColorKeyFrame KeyTime="0:0:0" Value="Green"/>
                                            <DiscreteColorKeyFrame KeyTime="0:0:0.5" Value="Red"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiDataTrigger.EnterActions>
                        </MultiDataTrigger>

                        <!--  Critical - Acknowledged  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="0" />
                                <Condition Binding="{Binding IsStatusAcknowledged}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="Red" />
                        </MultiDataTrigger>

                        <!--  Critical - Returned  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="0" />
                                <Condition Binding="{Binding IsStatusReturned}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard RepeatBehavior="Forever" Duration="0:0:1">
                                        <!--<ColorAnimation
                                            AutoReverse="true"
                                            RepeatBehavior="Forever"
                                            Storyboard.TargetProperty="(wpfToolkit:DataGridRow.Background).(SolidColorBrush.Color)"
                                            From="Red"
                                            To="White"
                                            Duration="0:0:0.5" />-->
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(wpfToolkit:DataGridRow.Background).(SolidColorBrush.Color)" >
                                            <DiscreteColorKeyFrame KeyTime="0:0:0" Value="White"/>
                                            <DiscreteColorKeyFrame KeyTime="0:0:0.5" Value="Red"/>
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiDataTrigger.EnterActions>
                        </MultiDataTrigger>

                        <!--  Warning - Active  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="1" />
                                <Condition Binding="{Binding IsStatusActive}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation
                                            AutoReverse="true"
                                            RepeatBehavior="Forever"
                                            Storyboard.TargetProperty="(wpfToolkit:DataGridRow.Background).(SolidColorBrush.Color)"
                                            From="Orange"
                                            To="Gray" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiDataTrigger.EnterActions>
                        </MultiDataTrigger>

                        <!--  Warning - Acknowledged  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="1" />
                                <Condition Binding="{Binding IsStatusAcknowledged}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="Orange" />
                        </MultiDataTrigger>

                        <!--  Warning - Returned  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="1" />
                                <Condition Binding="{Binding IsStatusReturned}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation
                                            AutoReverse="true"
                                            RepeatBehavior="Forever"
                                            Storyboard.TargetProperty="(wpfToolkit:DataGridRow.Background).(SolidColorBrush.Color)"
                                            From="Orange"
                                            To="White"
                                            Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiDataTrigger.EnterActions>
                        </MultiDataTrigger>

                        <!--  Advisory - Active  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="2" />
                                <Condition Binding="{Binding IsStatusActive}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation
                                            AutoReverse="true"
                                            RepeatBehavior="Forever"
                                            Storyboard.TargetProperty="(wpfToolkit:DataGridRow.Background).(SolidColorBrush.Color)"
                                            From="Yellow"
                                            To="Black" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiDataTrigger.EnterActions>
                        </MultiDataTrigger>

                        <!--  Advisory - Acknowledged  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="2" />
                                <Condition Binding="{Binding IsStatusAcknowledged}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="Yellow" />
                        </MultiDataTrigger>

                        <!--  Advisory - Returned  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Priority}" Value="2" />
                                <Condition Binding="{Binding IsStatusReturned}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation
                                            AutoReverse="true"
                                            RepeatBehavior="Forever"
                                            Storyboard.TargetProperty="(wpfToolkit:DataGridRow.Background).(SolidColorBrush.Color)"
                                            From="Yellow"
                                            To="White"
                                            Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiDataTrigger.EnterActions>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>


            </Grid.Resources>
  

            <!--  The Alarm DataGrid  -->
            <!--RowStyle="{StaticResource RowStyle}"-->
            <PropertyDataGrid
                x:Name="AlarmGrid"
                RowStyle="{StaticResource RowStyle2}"
                CanUserReorderColumns="True"
                CellStyle="{x:Null}"
                ColumnHeaderStyle="{StaticResource ColumnHeaderStyle}"
                HeadersVisibility="All"
                IsReadOnly="True"
                AlternatingRowBackground="#FFF8F8F8"
                IsResizedOnMouseEnterDisabled="True"
                ItemsSource="{Binding FilterableAlarms}"
                RowHeaderWidth="20"
                RowHeight="25"
                CurrentItem="{Binding SelectedAlarm}"
                GridLinesVisibility="None"
                SelectionUnit="FullRow"
                SortingCommand="{Binding SortingCommand}"
                alarms:PropertyGridExtension.ObserveVisibleItems="True"
                   
                alarms:PropertyGridExtension.VisibleItems="{Binding Path=VisibleAlarms, ElementName=alarmView, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">

                <PropertyDataGrid.Resources>
                    <wpfTools:DataContextSpy x:Key="spy" />
                    <wpfTools1:BindingProxy x:Key="proxySelectedAlarms" Data="{Binding Path=SelectedItems, ElementName=AlarmGrid}" />
                    <wpfTools1:BindingProxy x:Key="proxyVisibleAlarms" Data="{Binding Path=VisibleAlarms, ElementName=alarmView}" />
                </PropertyDataGrid.Resources>

                <PropertyDataGrid.ContextMenu>
                <ContextMenu DataContext="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget}">
                    <MenuItem
                        Header="Ack Selected"
                        CommandParameter="{Binding Data, Source={StaticResource proxySelectedAlarms}}"
                        Command="{markupExtensions:AlarmServiceFoxboroBinding AcknowledgeSelectedAlarms}"/>
                    <MenuItem
                        Header="Ack All"
                        Command="{markupExtensions:AlarmServiceFoxboroBinding AcknowledgeAlarmsCommand}"/>
                    <MenuItem
                        Header="Ack Visible"
                        Command="{markupExtensions:AlarmServiceFoxboroBinding AcknowledgeSelectedAlarms}"
                        CommandParameter="{Binding Data, Source={StaticResource proxyVisibleAlarms}}"/>
                </ContextMenu>
                </PropertyDataGrid.ContextMenu>
                <!--  Double click management  -->
                <PropertyDataGrid.InputBindings>
                    <!--<MouseBinding Command="{NavigateToAssociatedDisplayCommand}"
                                  CommandParameter="{Binding ElementName=AlarmGrid,
                                                                 Path=SelectedItem.ParentUnit}"
                                  Gesture="LeftDoubleClick"/>-->
                    <MouseBinding Command="{NavigateToAssociatedDisplayCommand}"
                                  CommandParameter="{Binding ElementName=AlarmGrid,
                                                                 Path=SelectedItem.ParentUnit}"
                                  MouseAction="LeftDoubleClick"/>
                </PropertyDataGrid.InputBindings>
                <PropertyDataGrid.Columns>

                    <!--  ************************************************************************************  -->
                    <!--  Time- Date in M/D/Year, hours in (Hour/Min/Second/Milli second)  -->
                    <wpfToolkit:DataGridTemplateColumn
                        ClipboardContentBinding="{Binding ChangedStatusSimulationDateTime, Mode=OneWay}"
                        ColumnId="{x:Static solution:Globals.AlarmChangedStatusSimulationTime}"
                        Header="Time"
                        SortMemberPath="ChangedStatusPcTime">
                        <wpfToolkit:DataGridTemplateColumn.CellTemplate>
                            <DataTemplate DataType="alarms3:IAlarm">
                                <TextBlock
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Text="{Binding ChangedStatusSimulationDateTime, Converter={FormatConverter FormatString='dd/MM/yy HH:mm:ss'}}" 
                                    />
                            </DataTemplate>
                        </wpfToolkit:DataGridTemplateColumn.CellTemplate>
                    </wpfToolkit:DataGridTemplateColumn>

                    <!--  ************************************************************************************  -->
                    <!--  State  -->
                    <wpfToolkit:DataGridTextColumn
                        AvailableValues="{Binding Source={x:Static alarms:AlarmView.AlarmStatusText}}"
                        Binding="{Binding Status, Converter={themes:StatusToTextConverter}}"
                        ClipboardContentBinding="{Binding Status, Mode=OneWay}"
                        ColumnId="{x:Static solution:Globals.AlarmStatus}"
                        Header="State"
                        IsReadOnly="True"
                        SortMemberPath="Status"
                        TypeMemberPath="{x:Type system:String}" />


                    <!--  ************************************************************************************  -->
                    <!--  Tag Name  -->
                    <wpfToolkit:DataGridTextColumn
                        Binding="{Binding ParentUnit.UnitOrTypicPath}"
                        ClipboardContentBinding="{Binding ParentUnit.UnitOrTypicPath, Mode=OneWay}"
                        ColumnId="{x:Static solution:Globals.AlarmParentUnitName}"
                        Header=" Tag Name "
                        IsReadOnly="True"
                        SortMemberPath="ParentUnit.UnitOrTypicPath"
                        TypeMemberPath="{x:Type system:String}" />

                    <!--  ************************************************************************************  -->
                    <!--  Priority  -->
                    <wpfToolkit:DataGridTextColumn
                        
                        Binding="{Binding AlarmModel.Priority}"
                        ClipboardContentBinding="{Binding AlarmModel.Priority, Mode=OneWay}"
                        ColumnId="{x:Static solution:Globals.AlarmPriority}"
                        Header="Priority"
                        IsReadOnly="True"
                        SortMemberPath="AlarmPriority"
                        TypeMemberPath="{x:Type system:String}" >
                    </wpfToolkit:DataGridTextColumn>

                    <!--  ************************************************************************************  -->
                    <!--  Alarm Value  -->
                    <!--Binding="{Binding CurrentValue}"
                        ClipboardContentBinding="{Binding CurrentValue, Mode=OneWay}"
                        ColumnId="{x:Static solution:Globals.AlarmReturnedValue}"
                    SortMemberPath="CurrentValue"
                    TypeMemberPath="{x:Type system:String}" -->
                    <wpfToolkit:DataGridTextColumn
                        Header="Alarm Value "
                        IsReadOnly="True">
                    </wpfToolkit:DataGridTextColumn>

                    <!--  ************************************************************************************  -->
                    <!--  Alarm Limit  -->
                    <wpfToolkit:DataGridTextColumn
                        Binding="{Binding Threshold}"
                        ClipboardContentBinding="{Binding Threshold, Mode=OneWay}"
                        Header="Alarm Limit"
                        IsReadOnly="True"
                        SortMemberPath="Threshold"
                        TypeMemberPath="{x:Type system:String}" >
                    </wpfToolkit:DataGridTextColumn>

                    <!--  ************************************************************************************  -->
                    <!--  Alarm Type  -->
                    <wpfToolkit:DataGridTextColumn
                        Header="Alarm Type"
                        IsReadOnly="True"
                        Binding="{Binding AlarmModel.Name}"
                        ClipboardContentBinding="{Binding AlarmModel.Name, Mode=OneWay}"
                        SortMemberPath="AlarmModel.Name"
                        TypeMemberPath="{x:Type system:String}" >
                    </wpfToolkit:DataGridTextColumn>

                    <!--  ************************************************************************************  -->
                    <!--  LoopID  -->
                    <wpfToolkit:DataGridTextColumn
                        Header="Loop ID"
                        IsReadOnly="True">
                    </wpfToolkit:DataGridTextColumn>

                    <!--  ************************************************************************************  -->
                    <!--  Comments = Comment 1 + Comment 2  -->
                    <wpfToolkit:DataGridTextColumn
                        ClipboardContentBinding="{Binding ParentUnit[TagComment1].ModelValue, Mode=OneWay}"
                        DoNotGenerateFilterControl="True"
                        Header="Description"
                        IsReadOnly="True"
                        SortMemberPath="ParentUnit[TagComment1].Value">
                        <wpfToolkit:DataGridTextColumn.Binding>
                            <MultiBinding Converter="{ConcatConverter RemoveEmptyStrings=true}">
                                <Binding Path="ParentUnit[TagComment1].Value" />
                                <Binding Path="ParentUnit[TagComment2].Value" />
                            </MultiBinding>
                        </wpfToolkit:DataGridTextColumn.Binding>
                    </wpfToolkit:DataGridTextColumn>

                    <!--  ************************************************************************************  -->
                    <!--  Alarm Description  -->
                    <wpfToolkit:DataGridTextColumn
                        Binding="{Binding AlarmModel.Description}"
                        ClipboardContentBinding="{Binding Description, Mode=OneWay}"
                        ColumnId="{x:Static solution:Globals.AlarmDescription}"
                        Header="Alarm Comment"
                        IsReadOnly="True"
                        SortMemberPath="AlarmModel.Description"
                        TypeMemberPath="{x:Type system:String}" />

                    <!--  ************************************************************************************  -->
                    <!--  General  -->
                    <wpfToolkit:DataGridTextColumn
                        ClipboardContentBinding="{Binding ParentUnit[EO1].ModelValue, Mode=OneWay}"
                        DoNotGenerateFilterControl="True"
                           Header="General"
                        IsReadOnly="True"
                        SortMemberPath="ParentUnit[EO1].Value"
                        Binding="{Binding ParentUnit[EO1].Value}">
                    </wpfToolkit:DataGridTextColumn>
                </PropertyDataGrid.Columns>
            </PropertyDataGrid>
        </Grid>
        
        <!-- The status bar -->
            <!--<StatusBar Background="#FFECECEC" Margin="0,0,0,0" Grid.Row="2">
                <StatusBar.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="28" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="28" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="28" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                        </Grid>
                    </ItemsPanelTemplate>
                </StatusBar.ItemsPanel>
      
                <StatusBarItem>
                    
                        <Image Source="../../../Resources/AlarmLed.png" />
                    
                </StatusBarItem>
            <Separator Grid.Column="1" Background="{StaticResource SeparatorColor}"/>
            <Separator Grid.Column="3" Background="{StaticResource SeparatorColor}"/>
            <Separator Grid.Column="5" Background="{StaticResource SeparatorColor}"/>
                <StatusBarItem Grid.Column="6">
                    <TextBlock >
                        <Run Text=" Displaying 1 to "/>
                        <Run Text="{Binding FilterableAlarms.Count, Mode=OneWay}"/>
                        <Run Text="of "/>
                        <Run Text="2 "/>
                        <Run Text="alarms "/>
                    </TextBlock>
            </StatusBarItem>
            <Separator Grid.Column="7" Background="{StaticResource SeparatorColor}"/>
                <StatusBarItem Grid.Column="8">
                    <TextBlock >Process</TextBlock>
            </StatusBarItem>
            <Separator Grid.Column="9" Background="{StaticResource SeparatorColor}"/>
                <StatusBarItem Grid.Column="10">
                    <TextBlock >100 % Complete</TextBlock>
            </StatusBarItem>
    
        </StatusBar>-->

    </Grid>
</RSISynoptic>
